/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module;

import org.mule.api.MuleException;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Source;
import org.mule.api.annotations.SourceThreadingModel;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.api.callback.SourceCallback;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalInput;
import com.pi4j.io.gpio.GpioPinDigitalMultipurpose;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.Pin;
import com.pi4j.io.gpio.PinMode;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.PinState;
import com.pi4j.io.gpio.RaspiPin;
import com.pi4j.io.gpio.event.GpioPinDigitalStateChangeEvent;
import com.pi4j.io.gpio.event.GpioPinListenerDigital;

import java.util.HashMap;
import java.util.Map;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "gpio", schemaVersion = "1.0-SNAPSHOT")
public class GPioConnector
{

    private GpioController gpio;
    private Map<String, GpioPinDigitalOutput> outputProvisionedPins;
    private Map<String, GpioPinDigitalInput> inputProvisionedPins;

    /**
     * Configurable
     */
    @Configurable
    private Map<String, Integer> outputPins;

    /**
     * Configurable
     */
    @Configurable
    private Map<String, Integer> inputPins;

    /**
     * Set the outputPins the user wants to provision so that they can be used in the message processors
     *
     * @param pins Pins user wants to provision
     */
    public void setOutputPins(Map<String, Integer> pins)
    {
        this.outputPins = pins;
    }


    /**
     * Set the inputPins the user wants to provision so that they can be used in the message processors
     *
     * @param pins Pins user wants to provision
     */
    public void setInputPins(Map<String, Integer> pins)
    {
        this.inputPins = pins;
    }

    /**
     *
     * @return
     */
    public Map<String, Integer> getInputPins()
    {
        return inputPins;
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/Pi-connector.xml.sample gpio:pinOn}
     *
     * @param pin Pin name
     * @return Some string
     */
    @Processor
    public String pinOn(String pin)
    {

        outputProvisionedPins.get(pin).high();
        return "High";
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/Pi-connector.xml.sample gpio:pinOff}
     *
     * @param pin Pin name
     * @return Some string
     */
    @Processor
    public String pinOff(String pin)
    {
        outputProvisionedPins.get(pin).low();
        return "Low";
    }

    /**
     * Starts listening for messages on a specifc chat
     * {@sample.xml ../../../doc/Pi-connector.xml.sample gpio:listenPin}
     *
     * @param pin Pin name
     * @param callback The callback of mule
     */
    @Source(threadingModel = SourceThreadingModel.SINGLE_THREAD)
    public void listenPin(final String pin, final SourceCallback callback)
    {
        inputProvisionedPins.get(pin).addListener(new GpioPinListenerDigital()
        {

            public void handleGpioPinDigitalStateChangeEvent(GpioPinDigitalStateChangeEvent event)
            {
                try
                {
                    callback.process(pin + "-" + event.getState());
                }
                catch (Exception e)
                {

                }
            }

        });
    }

    public Map<String, Integer> getOutputPins()
    {
        return this.outputPins;
    }

    @Start
    public void doStart() throws MuleException
    {

        gpio = GpioFactory.getInstance();
        outputProvisionedPins = new HashMap<String, GpioPinDigitalOutput>();
        for (Map.Entry<String, Integer> pinEntry : outputPins.entrySet())
        {
            GpioPinDigitalOutput gpioPinDigitalOutput = gpio.provisionDigitalOutputPin(fromPinNumber(pinEntry.getValue()), pinEntry.getKey(), PinState.LOW);
            outputProvisionedPins.put(pinEntry.getKey(), gpioPinDigitalOutput);
        }

        inputProvisionedPins = new HashMap<String, GpioPinDigitalInput>();

        for (Map.Entry<String, Integer> pinEntry : inputPins.entrySet())
        {
            GpioPinDigitalInput gpioPinDigitalInput = gpio.provisionDigitalInputPin(fromPinNumber(pinEntry.getValue()), pinEntry.getKey(), PinPullResistance.PULL_UP);
            inputProvisionedPins.put(pinEntry.getKey(), gpioPinDigitalInput);
        }

    }

    private Pin fromPinNumber(Integer pinNumber)
    {
        switch (pinNumber)
        {
            case 0:
                return RaspiPin.GPIO_00;
            case 1:
                return RaspiPin.GPIO_01;
            case 2:
                return RaspiPin.GPIO_02;
            case 3:
                return RaspiPin.GPIO_03;
            case 4:
                return RaspiPin.GPIO_04;
            case 5:
                return RaspiPin.GPIO_05;
            case 6:
                return RaspiPin.GPIO_06;
            case 7:
                return RaspiPin.GPIO_07;
            case 8:
                return RaspiPin.GPIO_08;
            case 9:
                return RaspiPin.GPIO_09;
            case 10:
                return RaspiPin.GPIO_10;
            case 11:
                return RaspiPin.GPIO_11;
            case 12:
                return RaspiPin.GPIO_12;
            case 13:
                return RaspiPin.GPIO_13;
            case 14:
                return RaspiPin.GPIO_14;
            case 15:
                return RaspiPin.GPIO_15;
            case 16:
                return RaspiPin.GPIO_16;
            case 17:
                return RaspiPin.GPIO_17;
            case 18:
                return RaspiPin.GPIO_18;
            case 19:
                return RaspiPin.GPIO_19;
            case 20:
                return RaspiPin.GPIO_20;


        }
        throw new IllegalArgumentException("Pin number " + pinNumber + " is out of range (0 - 20)");
    }

    @Stop
    public void doStop()
    {
        gpio.shutdown();
    }
}
